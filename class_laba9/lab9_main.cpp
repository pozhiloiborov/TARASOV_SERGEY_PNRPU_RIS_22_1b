//1.	–еализовать класс, перегрузить дл¤ него операции, указанные в варианте.
////2.	ќпределить исключительные ситуации.
////3.	ѕредусмотреть генерацию исключительных ситуаций.
//
// ласс - контейнер ¬≈ “ќ– с элементами типа int.–еализовать операции :
//[] Ц доступа по индексу;
//() Ц определение размера вектора;
//+число Ц добавл¤ет константу ко всем элементам вектора;
//-n - удал¤ет n элементов из конца вектора.
//
//¬ариант реализации  - 1,2
//1 - »нформаци¤ об исключительных ситуаци¤х передаетс¤ с помощью стандартного типа данных.
//2  - »нформаци¤ об исключительных ситуаци¤х передаетс¤ с помощью пользовательского класса.
// 
//»сключительные ситуации генерируютс¤ :
//1 Ц в конструкторе с параметром при попытке создать вектор больше максимального размера;
//2, 3 Ц в операции[] Ц при попытке обратитьс¤ к элементу с номером меньше 0 или больше текущего размера вектора;
//4	Ц в операции + Ц при попытке добавить элемент с номером больше максимального размера;
//5	Ц в операции Ц при попытке удалить элемент из пустого вектора.


#include <iostream>
#include "vector1.h"
#include "vector2.h"
#include "error.h"
using namespace std;

void main()
{
	setlocale(LC_ALL, "Russian");

	//1 вариант реализации

	try
	{
		vector x(5);//вектор из двух элементов
		cout<<x;//печать вектора х
		cout<<"Nomer? ";
		int i; cin >> i;
		//вывод элемента с номером i, если номер больше размера вектора или меньше 0, то error
		cout << x[i] << endl;
		x + 4;
		cout << x[i] << endl;
		cout << x;
		//если вектор пустой или размер вектора меньше чем число удал¤емых из него элементов, то error
		x-3; 
		cout << x;
	}
	//обработчик исключени¤
	catch (int a)
	{
		if (a == 2) cout << "ERROR. [i] , i<0 ";
		if (a == 3) cout << "ERROR. [i] , i>=size ";
		if (a == 4) cout << "ERROR. -n , size==0 ";
		if (a == 5) cout << "ERROR. -n , size< n ";
	}
	system("pause");
	system("cls");

	//2 вариант реализации

	try
	{
		vector2 y(5);//вектор из двух элементов
		cout << y;//печать вектора х
		cout << "Nomer?";
		int j; cin >> j;
		//вывод элемента с номером i, если номер больше размера вектора или меньше 0, то error
		cout << y[j] << endl;
		y + 4;
		cout << y[j] << endl;
		cout << y;
		//если вектор пустой или размер вектора меньше чем число удал¤емых из него элементов, то error
		y - 3;
		cout << y;
	}
	//обработчик исключени¤
	catch (error e)
	{
		e.what();
	}
}